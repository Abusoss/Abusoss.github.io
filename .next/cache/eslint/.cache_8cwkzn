[{"/home/lmn-dev/projects/Abusoss.github.io/src/pages/_app.tsx":"1","/home/lmn-dev/projects/Abusoss.github.io/src/pages/api/trpc/[trpc].ts":"2","/home/lmn-dev/projects/Abusoss.github.io/src/pages/index.tsx":"3","/home/lmn-dev/projects/Abusoss.github.io/src/server/router/context.ts":"4","/home/lmn-dev/projects/Abusoss.github.io/src/server/router/example.ts":"5","/home/lmn-dev/projects/Abusoss.github.io/src/server/router/index.ts":"6","/home/lmn-dev/projects/Abusoss.github.io/src/utils/trpc.ts":"7"},{"size":1915,"mtime":1663623524348,"results":"8","hashOfConfig":"9"},{"size":536,"mtime":1663623524348,"results":"10","hashOfConfig":"9"},{"size":2992,"mtime":1663623524348,"results":"11","hashOfConfig":"9"},{"size":861,"mtime":1663623524348,"results":"12","hashOfConfig":"9"},{"size":314,"mtime":1663623524348,"results":"13","hashOfConfig":"9"},{"size":331,"mtime":1663623524348,"results":"14","hashOfConfig":"9"},{"size":1027,"mtime":1663623524348,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"1a8oh1e",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/lmn-dev/projects/Abusoss.github.io/src/pages/_app.tsx",["39"],[],"// src/pages/_app.tsx\nimport { httpBatchLink } from \"@trpc/client/links/httpBatchLink\";\nimport { loggerLink } from \"@trpc/client/links/loggerLink\";\nimport { withTRPC } from \"@trpc/next\";\nimport type { AppType } from \"next/dist/shared/lib/utils\";\nimport superjson from \"superjson\";\nimport type { AppRouter } from \"../server/router\";\nimport \"../styles/globals.css\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return <Component {...pageProps} />;\n};\n\nconst getBaseUrl = () => {\n  if (typeof window !== \"undefined\") return \"\"; // browser should use relative url\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url\n  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost\n};\n\nexport default withTRPC<AppRouter>({\n  config({ ctx }) {\n    /**\n     * If you want to use SSR, you need to use the server's full URL\n     * @link https://trpc.io/docs/ssr\n     */\n    const url = `${getBaseUrl()}/api/trpc`;\n\n    return {\n      links: [\n        loggerLink({\n          enabled: (opts) =>\n            process.env.NODE_ENV === \"development\" ||\n            (opts.direction === \"down\" && opts.result instanceof Error),\n        }),\n        httpBatchLink({ url }),\n      ],\n      url,\n      transformer: superjson,\n      /**\n       * @link https://react-query.tanstack.com/reference/QueryClient\n       */\n      // queryClientConfig: { defaultOptions: { queries: { staleTime: 60 } } },\n\n      // To use SSR properly you need to forward the client's headers to the server\n      // headers: () => {\n      //   if (ctx?.req) {\n      //     const headers = ctx?.req?.headers;\n      //     delete headers?.connection;\n      //     return {\n      //       ...headers,\n      //       \"x-ssr\": \"1\",\n      //     };\n      //   }\n      //   return {};\n      // }\n    };\n  },\n  /**\n   * @link https://trpc.io/docs/ssr\n   */\n  ssr: false,\n})(MyApp);\n","/home/lmn-dev/projects/Abusoss.github.io/src/pages/api/trpc/[trpc].ts",[],[],"/home/lmn-dev/projects/Abusoss.github.io/src/pages/index.tsx",[],[],"/home/lmn-dev/projects/Abusoss.github.io/src/server/router/context.ts",["40","41"],[],"// src/server/router/context.ts\nimport * as trpc from \"@trpc/server\";\nimport * as trpcNext from \"@trpc/server/adapters/next\";\n\n/**\n * Replace this with an object if you want to pass things to createContextInner\n */\ntype CreateContextOptions = Record<string, never>;\n\n/** Use this helper for:\n * - testing, where we dont have to Mock Next.js' req/res\n * - trpc's `createSSGHelpers` where we don't have req/res\n **/\nexport const createContextInner = async (opts: CreateContextOptions) => {\n  return {};\n};\n\n/**\n * This is the actual context you'll use in your router\n * @link https://trpc.io/docs/context\n **/\nexport const createContext = async (\n  opts: trpcNext.CreateNextContextOptions,\n) => {\n  return await createContextInner({});\n};\n\ntype Context = trpc.inferAsyncReturnType<typeof createContext>;\n\nexport const createRouter = () => trpc.router<Context>();\n","/home/lmn-dev/projects/Abusoss.github.io/src/server/router/example.ts",[],[],"/home/lmn-dev/projects/Abusoss.github.io/src/server/router/index.ts",[],[],"/home/lmn-dev/projects/Abusoss.github.io/src/utils/trpc.ts",[],[],{"ruleId":"42","severity":1,"message":"43","line":21,"column":12,"nodeType":"44","messageId":"45","endLine":21,"endColumn":15},{"ruleId":"42","severity":1,"message":"46","line":14,"column":42,"nodeType":"44","messageId":"45","endLine":14,"endColumn":68},{"ruleId":"42","severity":1,"message":"46","line":23,"column":3,"nodeType":"44","messageId":"45","endLine":23,"endColumn":42},"@typescript-eslint/no-unused-vars","'ctx' is defined but never used.","Identifier","unusedVar","'opts' is defined but never used."]